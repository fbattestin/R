install.packages("Matrix")
install.packages("grid")
install.packages("arules")
install.packages("arulesViz")

install.packages("eclat")

library("eclat")
setwd ("c:/Temp")

library("Matrix")
library("grid")
library("arules")
library("arulesViz")

require ("arules")


freq <- read.transactions("DataTran.csv", sep = ",")


freq
# transactions in sparse format with
# 803 transactions (rows) and
# 906 items (columns)


summary(freq)
# transactions as itemMatrix in sparse format with
# 803 rows (elements/itemsets/transactions) and
# 906 columns (items) and a density of 0.1182253 
# 
# most frequent items:
#   30|808  9|1553 97|1565 71|1257  7|1221 (Other) 
# 725     646     630     587     573   82850 

itemFrequency(freq[1:3])

itemFrequencyPlot(freq, topN=20)

m1 <- apriori(freq ,parameter=list(maxlen=10, maxtime= 10))

m1 <- apriori(freq ,parameter=list(maxlen=10, maxtime= 20))

m1 <- apriori(freq ,parameter=list(maxlen=20, maxtime= 30))

m1 <- apriori(freq ,parameter=list(maxlen=350,minlen = 2, maxtime= 20, supp = 0.60))

write(m1, file = "d:/data.csv", sep = ",")

# Apriori
# 
# Parameter specification:
#   confidence minval smax arem  aval originalSupport maxtime support minlen maxlen
# 0.8    0.1    1 none FALSE            TRUE      10     0.7      1     10
# target   ext
# rules FALSE
# 
# Algorithmic control:
#   filter tree heap memopt load sort verbose
# 0.1 TRUE TRUE  FALSE TRUE    2    TRUE
# 
# Absolute minimum support count: 562 
# 
# set item appearances ...[0 item(s)] done [0.00s].
# set transactions ...[906 item(s), 803 transaction(s)] done [0.00s].
# sorting and recoding items ... [14 item(s)] done [0.00s].
# creating transaction tree ... done [0.00s].
# checking subsets of size 1 2 3 4 5 6 done [0.00s].
# writing ... [342 rule(s)] done [0.00s].
# creating S4 object  ... done [0.00s].


m1
#set of 342 rules

plot(m1)

head(quality(m1))
> head(quality(m1))
support confidence     lift count
# 1 0.8044832  0.8044832 1.000000   646
# 2 0.9028643  0.9028643 1.000000   725
# 3 0.7011208  0.9964602 1.413706   563
# 4 0.7011208  0.9946996 1.413706   563
# 5 0.7011208  0.9964602 1.413706   563
# 6 0.7011208  0.9946996 1.413706   563

plot(m1, measure=c("support", "lift"), shading="confidence")

plot(m1, shading="order", control=list(main = "Two-key plot"))

sel <- plot(m1, measure=c("support", "lift"), shading="confidence", interactive=TRUE)

plot(m1, method="matrix", measure="lift", control=list(reorder=TRUE))

plot(m1, method="matrix3D", measure="lift")

plot(m1, method="matrix3D", measure="lift", control=list(reorder=TRUE))

plot(m1, method="matrix", measure=c("lift", "confidence"))

subrules <- head(sort(m1, by="lift"), 100)

plot(m1, method="graph")


plot(m1, method="grouped", control=list(k=5))


plot(subrules, method="graph", control=list(type="itemsets"))


saveAsGraph(head(sort(m1, by="lift"),1000), file="rules.graphml")

plot(subrules, method="paracoord")

plot(subrules, method="paracoord", control=list(reorder=TRUE))


oneRule <- sample(m1, 1)
inspect(m1)

as(m1, "data.frame");
write(m1, file = "data.csv", sep = ",")
write.csv(m1,"ResultRules.csv")



